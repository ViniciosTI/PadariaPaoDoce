-- MySQL Script generated by MySQL Workbench
-- 11/26/18 21:21:18
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema banco_pd
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema banco_pd
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `banco_pd` DEFAULT CHARACTER SET utf8 ;
USE `banco_pd` ;

-- -----------------------------------------------------
-- Table `banco_pd`.`produtos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `banco_pd`.`produtos` ;

CREATE TABLE IF NOT EXISTS `banco_pd`.`produtos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(55) NOT NULL,
  `unid_medida` VARCHAR(45) NOT NULL,
  `preco` FLOAT NOT NULL,
  `status` TINYINT(1) NOT NULL COMMENT '0 = desligado\n1 = ligado',
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco_pd`.`cargos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `banco_pd`.`cargos` ;

CREATE TABLE IF NOT EXISTS `banco_pd`.`cargos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NOT NULL,
  `salario` FLOAT NOT NULL,
  `permissao` INT NOT NULL COMMENT ' 0 - Acesso total\n 1 - Acesso de caxai\n 2 - restrito\n ',
  `descricao` VARCHAR(45) NULL,
  `status` TINYINT(1) NOT NULL COMMENT '0 = desligado\n1 = ligado',
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco_pd`.`funcionarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `banco_pd`.`funcionarios` ;

CREATE TABLE IF NOT EXISTS `banco_pd`.`funcionarios` (
  `cpf` BIGINT(11) NOT NULL,
  `idcargos` INT NOT NULL,
  `nome` VARCHAR(55) NOT NULL,
  `telefone` BIGINT(11) NOT NULL,
  `data_nasc` DATE NOT NULL,
  `email` VARCHAR(55) NULL,
  `status` TINYINT(1) NULL,
  INDEX `fk_funcionarios_cargos1_idx` (`idcargos` ASC),
  PRIMARY KEY (`cpf`),
  CONSTRAINT `fk_funcionarios_cargos1`
    FOREIGN KEY (`idcargos`)
    REFERENCES `banco_pd`.`cargos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco_pd`.`usuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `banco_pd`.`usuarios` ;

CREATE TABLE IF NOT EXISTS `banco_pd`.`usuarios` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `funcionarios_cpf` BIGINT(11) NOT NULL,
  `usuario` VARCHAR(45) NOT NULL,
  `senha` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_usuarios_funcionarios1_idx` (`funcionarios_cpf` ASC),
  CONSTRAINT `fk_usuarios_funcionarios1`
    FOREIGN KEY (`funcionarios_cpf`)
    REFERENCES `banco_pd`.`funcionarios` (`cpf`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco_pd`.`vendas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `banco_pd`.`vendas` ;

CREATE TABLE IF NOT EXISTS `banco_pd`.`vendas` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `idusuario` INT NOT NULL,
  `forma_pag` TINYINT(1) NOT NULL COMMENT '0 = dinheiro\n1 = débito\n2 = crédito',
  `data_emissao` DATE NULL,
  `data_final` DATE NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_vendas_usuario1_idx` (`idusuario` ASC),
  CONSTRAINT `fk_vendas_usuario1`
    FOREIGN KEY (`idusuario`)
    REFERENCES `banco_pd`.`usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `banco_pd`.`vendas_has_produtos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `banco_pd`.`vendas_has_produtos` ;

CREATE TABLE IF NOT EXISTS `banco_pd`.`vendas_has_produtos` (
  `idvendas` INT NOT NULL,
  `idprodutos` INT NOT NULL,
  `quantidade` FLOAT NOT NULL,
  INDEX `fk_produtos_has_vendas_vendas1_idx` (`idvendas` ASC),
  INDEX `fk_produtos_has_vendas_produtos1_idx` (`idprodutos` ASC),
  CONSTRAINT `fk_produtos_has_vendas_produtos1`
    FOREIGN KEY (`idprodutos`)
    REFERENCES `banco_pd`.`produtos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_produtos_has_vendas_vendas1`
    FOREIGN KEY (`idvendas`)
    REFERENCES `banco_pd`.`vendas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `banco_pd` ;

-- -----------------------------------------------------
-- Placeholder table for view `banco_pd`.`view_FuncUser`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco_pd`.`view_FuncUser` (`usuario` INT, `id` INT, `cpf` INT, `idcargos` INT, `nome` INT, `telefone` INT, `data_nasc` INT, `email` INT, `status` INT, `nome_cargo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `banco_pd`.`ultimaVenda`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco_pd`.`ultimaVenda` (`id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `banco_pd`.`graficoProduto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco_pd`.`graficoProduto` (`status` INT, `data_final` INT, `nome` INT, `prec` INT);

-- -----------------------------------------------------
-- Placeholder table for view `banco_pd`.`faturamento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco_pd`.`faturamento` (`quantidade` INT, `data_final` INT);

-- -----------------------------------------------------
-- Placeholder table for view `banco_pd`.`consulta_venda`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco_pd`.`consulta_venda` (`resp` INT, `id` INT, `forma_pag` INT, `data_final` INT, `data_emissao` INT, `nome` INT);

-- -----------------------------------------------------
-- Placeholder table for view `banco_pd`.`listaVenda`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `banco_pd`.`listaVenda` (`id` INT, `nome` INT, `unid_medida` INT, `preco` INT, `quantidade` INT, `idvendas` INT);

-- -----------------------------------------------------
-- View `banco_pd`.`view_FuncUser`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `banco_pd`.`view_FuncUser` ;
DROP TABLE IF EXISTS `banco_pd`.`view_FuncUser`;
USE `banco_pd`;
CREATE  OR REPLACE VIEW `view_FuncUser` AS
SELECT usuarios.usuario, usuarios.id,funcionarios.*, cargos.nome as nome_cargo FROM funcionarios inner join cargos on funcionarios.idcargos=cargos.id inner join usuarios on usuarios.funcionarios_cpf=funcionarios.cpf;

-- -----------------------------------------------------
-- View `banco_pd`.`ultimaVenda`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `banco_pd`.`ultimaVenda` ;
DROP TABLE IF EXISTS `banco_pd`.`ultimaVenda`;
USE `banco_pd`;
CREATE  OR REPLACE VIEW `ultimaVenda` AS
select max(id) as id from vendas;

-- -----------------------------------------------------
-- View `banco_pd`.`graficoProduto`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `banco_pd`.`graficoProduto` ;
DROP TABLE IF EXISTS `banco_pd`.`graficoProduto`;
USE `banco_pd`;
CREATE  OR REPLACE VIEW `graficoProduto` AS
select p.status, v.data_final, p.nome, round(sum(vp.quantidade)*p.preco,2) as prec 
from vendas_has_produtos as vp 
inner join produtos as p on vp.idprodutos=p.id inner join 
vendas as v on v.id=vp.idvendas 
group by vp.idprodutos order by prec DESC LIMIT 8;

-- -----------------------------------------------------
-- View `banco_pd`.`faturamento`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `banco_pd`.`faturamento` ;
DROP TABLE IF EXISTS `banco_pd`.`faturamento`;
USE `banco_pd`;
CREATE  OR REPLACE VIEW `faturamento` AS
select round(sum(p.preco*vp.quantidade),2) as quantidade, data_final 
from vendas_has_produtos as vp 
inner join produtos as p on vp.idprodutos=p.id 
right join vendas as v on v.id=vp.idvendas 
group by data_final ORDER BY data_final desc;

-- -----------------------------------------------------
-- View `banco_pd`.`consulta_venda`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `banco_pd`.`consulta_venda` ;
DROP TABLE IF EXISTS `banco_pd`.`consulta_venda`;
USE `banco_pd`;
CREATE  OR REPLACE VIEW `consulta_venda` AS
select round(p.preco*vp.quantidade,2) as resp,v.id,v.forma_pag,v.data_final, v.data_emissao,f.nome from vendas as v 
inner join usuarios as u on v.idusuario=u.id 
inner join funcionarios as f on u.funcionarios_cpf = f.cpf
inner join vendas_has_produtos as vp on vp.idvendas = v.id
inner join produtos as p on p.id = vp.idprodutos group by vp.idvendas;

-- -----------------------------------------------------
-- View `banco_pd`.`listaVenda`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `banco_pd`.`listaVenda` ;
DROP TABLE IF EXISTS `banco_pd`.`listaVenda`;
USE `banco_pd`;
CREATE  OR REPLACE VIEW `listaVenda` AS
select p.id,p.nome,p.unid_medida,p.preco,vp.quantidade,vp.idvendas from vendas_has_produtos as vp inner join produtos as p on vp.idprodutos = p.id;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
